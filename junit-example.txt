1. JUnit 5 with MicroProfile Testing Frameworks

JUnit 5 is commonly used for unit and integration testing, and it can be extended with MicroProfile-specific testing libraries.

	•	MicroProfile Test Frameworks like Arquillian or Eclipse MicroProfile Testing help in testing MicroProfile services in container-based environments or microservices architecture.

Example with JUnit 5 and Arquillian:



@RunWith(Arquillian.class)
public class StudentResourceTest {

    @Inject
    private StudentResource studentResource;

    @Test
    public void testGetStudents() {
        List<Student> students = studentResource.getStudents();
        assertFalse(students.isEmpty());
    }
}




Arquillian allows running tests inside a real MicroProfile runtime, enabling full integration testing of services.

2. TestContainers

TestContainers is a Java library that allows you to create and manage lightweight, disposable containers for testing, including for MicroProfile applications. You can use TestContainers to spin up containers for databases, messaging systems, or even MicroProfile runtimes (e.g., Liberty, Payara) during your tests.

	•	It is commonly combined with JUnit 5.
	•	Allows testing services with external dependencies (like databases, Kafka, etc.) in isolation using containers.

Example with JUnit and TestContainers:






@Testcontainers
public class StudentServiceIntegrationTest {

    @Container
    public GenericContainer<?> payara = new GenericContainer<>("payara/server-full:latest")
        .withExposedPorts(8080);

    @Test
    public void testServiceRunning() {
        String baseUrl = String.format("http://localhost:%d", payara.getMappedPort(8080));
        Response response = RestAssured.get(baseUrl + "/api/students");
        assertEquals(200, response.getStatusCode());
    }
}







3. WireMock for Mocking APIs

WireMock is an HTTP mock server that helps you stub and simulate responses for your MicroProfile services during testing. It can be useful for isolating your service from external dependencies (e.g., external APIs or services) by mocking them.

	•	Can be integrated with JUnit or Cucumber.
	•	Supports setting up different scenarios, such as timeouts, 500 errors, or different response payloads.

Example of WireMock in Unit Test:




@BeforeAll
public static void setup() {
    WireMockServer wireMockServer = new WireMockServer(8089);
    wireMockServer.start();
    
    stubFor(get(urlEqualTo("/api/students"))
            .willReturn(aResponse().withBody("[{\"id\":\"1\",\"name\":\"John\"}]")
                                   .withStatus(200)));
}

@Test
public void testStudentServiceWithMock() {
    Response response = RestAssured.get("http://localhost:8089/api/students");
    assertEquals(200, response.getStatusCode());
}



4. Karate DSL

Karate is a DSL (Domain-Specific Language) that combines API testing, UI testing, and performance testing into a single framework. It is built on top of Cucumber, so it has a Gherkin-style syntax but provides many extra features, like calling multiple services and performing assertions.

	•	Can be used to perform end-to-end and integration tests on MicroProfile services.
	•	Supports both REST API testing and mocking.
	•	Allows you to perform load testing as well.

Example Karate DSL Test:




Feature: Student API Test

  Scenario: Get all students
    Given url 'http://localhost:8080/api/students'
    When method get
    Then status 200
    And match response[0].name == 'John Smith'



    5. RESTEasy Client with JUnit

RESTEasy is a popular JAX-RS implementation that includes a client framework. You can use it to write integration tests with MicroProfile services in combination with JUnit.

Example with RESTEasy Client:




public class StudentResourceTest {

    private static ResteasyClient client;

    @BeforeAll
    public static void init() {
        client = new ResteasyClientBuilder().build();
    }

    @Test
    public void testGetStudents() {
        ResteasyWebTarget target = client.target("http://localhost:8080/api/students");
        Response response = target.request().get();
        assertEquals(200, response.getStatus());
        List<Student> students = response.readEntity(new GenericType<List<Student>>() {});
        assertFalse(students.isEmpty());
    }
}




6. Postman/Newman

Postman is a popular tool for manual and automated API testing, which can be extended using Newman, a command-line tool that allows you to run Postman collections directly from a CI/CD pipeline or automated tests.

	•	Postman supports scripting for advanced test cases and can be integrated with JUnit or Cucumber using Newman.
	•	Suitable for end-to-end API testing and performance testing.

7. Pact for Consumer-Driven Contract Testing

Pact is a tool for consumer-driven contract testing. It helps ensure that services (consumers) and the microservices they depend on (providers) interact as expected by generating contracts and testing both sides.

	•	Useful in a microservices architecture to ensure communication consistency.
	•	Works with JUnit or RestAssured for testing.

Example Pact Test:




@ExtendWith(PactConsumerTestExt.class)
class StudentPactTest {

    @Pact(consumer = "studentClient", provider = "studentProvider")
    public RequestResponsePact createPact(PactDslWithProvider builder) {
        return builder
                .given("A student exists")
                .uponReceiving("A request for student details")
                .path("/api/students/1")
                .method("GET")
                .willRespondWith()
                .status(200)
                .body(new PactDslJsonBody().stringType("name", "John Smith"))
                .toPact();
    }

    @Test
    @PactTestFor(pactMethod = "createPact")
    void testStudentService(MockServer mockServer) {
        String baseUrl = mockServer.getUrl() + "/api/students/1";
        Response response = RestAssured.get(baseUrl);
        assertEquals(200, response.getStatusCode());
        assertEquals("John Smith", response.jsonPath().getString("name"));
    }
}




8. Gatling for Performance Testing

If you are concerned with performance, Gatling is a powerful tool for load and stress testing MicroProfile services.

	•	Gatling scripts can be written in Scala and simulate high loads against your microservices to measure response times, throughput, and more.

Gatling Example:



class StudentLoadTest extends Simulation {

  val httpProtocol = http
    .baseUrl("http://localhost:8080")
    .acceptHeader("application/json")

  val scn = scenario("Student API Load Test")
    .exec(http("Get Students")
      .get("/api/students")
      .check(status.is(200)))

  setUp(
    scn.inject(atOnceUsers(100))
  ).protocols(httpProtocol)
}




Conclusion

The technology you choose for test automation of your MicroProfile services depends on your testing needs:

	•	JUnit 5 for basic unit and integration tests.
	•	RestAssured for REST API testing.
	•	TestContainers for integration tests with real dependencies (databases, Kafka, etc.).
	•	Karate DSL or WireMock for a more extensive API testing and mocking framework.
	•	Pact for contract testing in a microservices ecosystem.
	•	Gatling for performance testing.

Each of these tools offers unique strengths for ensuring your MicroProfile services are thoroughly tested and performing optimally.

