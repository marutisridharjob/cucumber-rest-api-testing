Below is a more detailed, ready-to-run Microshed Testing setup where you will send a JSON request to the endpoint, receive the JSON response, and compare it with the expected output JSON for full contract-style testing.

Goal

We will test CRUD operations of a MicroProfile REST API using Microshed Testing. We’ll send JSON data as input, retrieve JSON responses, and compare the response data with an expected JSON format, simulating a contract test.

Project Structure


student-api-microshed/
├── src
│   ├── main
│   │   └── java
│   │       └── com
│   │           └── example
│   │               └── students
│   │                   ├── Student.java
│   │                   └── StudentResource.java
│   ├── test
│   │   └── java
│   │       └── com
│   │           └── StudentCrudMicroshedTest.java
├── pom.xml


1. pom.xml

This pom.xml includes dependencies for Microshed Testing, JUnit 5, RestAssured, and JSON path assertions.


<project xmlns="http://maven.apache.org/POM/4.0.0">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>student-api-microshed</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
    </properties>

    <dependencies>
        <!-- MicroProfile API -->
        <dependency>
            <groupId>org.eclipse.microprofile</groupId>
            <artifactId>microprofile</artifactId>
            <version>3.3</version>
        </dependency>

        <!-- Microshed Testing -->
        <dependency>
            <groupId>org.microshed</groupId>
            <artifactId>microshed-testing-liberty</artifactId>
            <version>0.9</version>
            <scope>test</scope>
        </dependency>

        <!-- JUnit 5 -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.7.0</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>

        <!-- RestAssured for API testing -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>4.4.0</version>
            <scope>test</scope>
        </dependency>

        <!-- JSON Assertion Library -->
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>2.5.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>



2. MicroProfile REST API CRUD Operations

Student.java

This is the model class representing a student entity.

package com.example.students;

public class Student {
    private String id;
    private String name;
    private String grade;
    private int enrollmentYear;

    public Student() { }

    public Student(String id, String name, String grade, int enrollmentYear) {
        this.id = id;
        this.name = name;
        this.grade = grade;
        this.enrollmentYear = enrollmentYear;
    }

    // Getters and setters
    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getGrade() {
        return grade;
    }

    public void setGrade(String grade) {
        this.grade = grade;
    }

    public int getEnrollmentYear() {
        return enrollmentYear;
    }

    public void setEnrollmentYear(int enrollmentYear) {
        this.enrollmentYear = enrollmentYear;
    }
}


StudentResource.java

This class exposes CRUD operations via REST endpoints.


package com.example.students;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Path("/students")
@Produces(MediaType.APPLICATION_JSON)
@Consumes(MediaType.APPLICATION_JSON)
public class StudentResource {

    private static List<Student> students = new ArrayList<>();

    static {
        students.add(new Student("1", "John Smith", "A", 2022));
        students.add(new Student("2", "Jane Doe", "B", 2021));
        students.add(new Student("3", "Sam Black", "A", 2022));
    }

    @GET
    public List<Student> getStudents() {
        return students;
    }

    @GET
    @Path("/{id}")
    public Response getStudent(@PathParam("id") String id) {
        Optional<Student> student = students.stream()
                .filter(s -> s.getId().equals(id))
                .findFirst();

        return student.map(value -> Response.ok(value).build())
                .orElse(Response.status(Response.Status.NOT_FOUND).build());
    }

    @POST
    public Response createStudent(Student student) {
        students.add(student);
        return Response.status(Response.Status.CREATED).entity(student).build();
    }

    @PUT
    @Path("/{id}")
    public Response updateStudent(@PathParam("id") String id, Student student) {
        for (Student s : students) {
            if (s.getId().equals(id)) {
                s.setName(student.getName());
                s.setGrade(student.getGrade());
                s.setEnrollmentYear(student.getEnrollmentYear());
                return Response.ok(s).build();
            }
        }
        return Response.status(Response.Status.NOT_FOUND).build();
    }

    @DELETE
    @Path("/{id}")
    public Response deleteStudent(@PathParam("id") String id) {
        students.removeIf(s -> s.getId().equals(id));
        return Response.noContent().build();
    }
}


3. Microshed Testing with JSON Contract Validation

We will write a test that sends a JSON request, receives a JSON response, and compares it against an expected JSON using RestAssured and JSONPath assertions.

StudentCrudMicroshedTest.java


package com.example;

import com.example.students.Student;
import org.junit.jupiter.api.Test;
import org.microshed.testing.jupiter.MicroShedTest;
import org.microshed.testing.SharedContainerConfig;
import org.microshed.testing.liberty.junit.LibertyServer;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;
import static org.junit.jupiter.api.Assertions.assertEquals;
import io.restassured.response.Response;
import com.jayway.jsonpath.JsonPath;

@MicroShedTest
@SharedContainerConfig(LocalLibertyServer.class)
public class StudentCrudMicroshedTest {

    @Test
    public void testGetAllStudents() {
        Response response = given()
            .when()
            .get("/students")
            .then()
            .statusCode(200)
            .extract()
            .response();
        
        String responseBody = response.getBody().asString();

        // Validate JSON response using JsonPath
        String name = JsonPath.read(responseBody, "$[0].name");
        assertEquals("John Smith", name);
    }

    @Test
    public void testCreateStudent() {
        Student newStudent = new Student("4", "Alice Blue", "C", 2023);

        Response response = given()
            .contentType("application/json")
            .body(newStudent)
            .when()
            .post("/students")
            .then()
            .statusCode(201)
            .extract()
            .response();

        String responseBody = response.getBody().asString();

        // Validate the created student JSON structure
        String id = JsonPath.read(responseBody, "$.id");
        String name = JsonPath.read(responseBody, "$.name");
        String grade = JsonPath.read(responseBody, "$.grade");
        int enrollmentYear = JsonPath.read(responseBody, "$.enrollmentYear");

        assertEquals("4", id);
        assertEquals("Alice Blue", name);
        assertEquals("C", grade);
        assertEquals(2023, enrollmentYear);
    }

    @Test
    public void testUpdateStudent() {
        Student updatedStudent = new Student("2", "Jane Green", "A+", 2021);

        Response response = given()
            .contentType("application/json")
            .body(updatedStudent)
            .when()
            .put("/students/2")
            .then()
            .statusCode(200)
            .extract()
            .response();

        String responseBody = response.getBody().asString();

        // Validate the updated student JSON structure
        String name = JsonPath.read(responseBody, "$.name");
        String grade = JsonPath.read(responseBody, "$.grade");

        assertEquals("Jane Green", name);
        assertEquals("A+", grade);
    }

    @Test
    public void testDeleteStudent() {
        given()
            .when()
            .delete("/students/3")
            .then()
            .statusCode(204);

        // Verify the student is deleted
        given()
            .when()
            .get("/students/3")
            .then()
            .statusCode(404);
    }
}




Key Points

	1.	testGetAllStudents():
	•	Fetches the list of all students and validates the first student’s name using JSONPath.
	2.	testCreateStudent():
	•	Sends a POST request with a new student, checks that the student was created successfully (statusCode 201), and validates the returned JSON response for ID, name, grade, and enrollment year.
	3.	testUpdateStudent():
	•	Sends a PUT request to update an existing student’s information. The test validates that the updated name and grade are correctly reflected in the response.
	4.	testDeleteStudent():
	•	Sends a DELETE request to remove a student and checks that the student was successfully deleted (statusCode 204). A subsequent GET request is made to ensure that the deleted student is no longer accessible (expecting 404).

4. Local Liberty Server Configuration

Finally, here is the LocalLibertyServer.java that defines how Microshed Testing will run your Open Liberty instance locally.

LocalLibertyServer.java



package com.example;

import org.microshed.testing.liberty.junit.LibertyServer;

public class LocalLibertyServer extends LibertyServer {

    @Override
    public String getBaseUri() {
        return "http://localhost:9080/student-api-microshed";  // Adjust to match your Liberty configuration
    }
}


Running the Tests Locally

	1.	Make sure Open Liberty is installed and configured to run locally.
	2.	Build the project with Maven:




 mvn clean install
 mvn test



 Conclusion

This setup allows you to use Microshed Testing locally with Open Liberty. The tests include CRUD operations, and the JSON responses are validated against expected JSON using JSONPath, effectively making this a contract-style test where you compare the actual responses to the expected JSON structure.
